// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String   @db.Text
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model Quote {
  id             String   @id @default(cuid())
  name           String
  email          String
  serviceType    String
  options        String[]
  message        String?  @db.Text
  estimatedPrice Int
  status         String   @default("pending")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("quotes")
}

model Booking {
  id           String   @id @default(cuid())
  name         String
  email        String
  phone        String?
  message      String?  @db.Text
  selectedSlot String
  status       String   @default("confirmed")
  isFake       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("bookings")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Client {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  isValidated  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  wizardResponses WizardResponse[]
  sessions        ClientSession[]

  @@map("clients")
}

model WizardResponse {
  id        String   @id @default(cuid())
  clientId  String
  step      Int
  data      Json
  isDraft   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, step])
  @@map("wizard_responses")
}

model ClientSession {
  id        String   @id @default(cuid())
  clientId  String
  ipAddress String
  userAgent String?
  loggedAt  DateTime @default(now())

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("client_sessions")
}

// TABLE: Password Reset
model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  userType  String   // 'client' ou 'admin'
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([token])
  @@index([email])
  @@index([expiresAt])
  @@map("password_resets")
}